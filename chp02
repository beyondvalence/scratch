# !/usr/bin/env python27
# -*- coding: utf-8 -*-
"""
Created on Mon Feb  27 21:39:29 2017

@author: waynetliu
"""

# Functions
print "Functions"
def double(x):
    """optional doc string
    where you can specifiy what this does
    ex: this function multiplies input by 2"""
    return x*2
    
def apply_to_one(f):
    """calls the function f with 1 as its argument"""
    return f(1)
    
my_double = double
x = apply_to_one(my_double)
print x # equals 2

y = apply_to_one(lambda x: x + 4) # equals 5
print y

def subtract(a=0, b=0):
    return a - b
    
subtract(10, 5) # returns 5
subtract(0, 5) # returns -5
subtract(b=5) # returns -5

# Strings
print "\nStrings"
tab_string = "\t"
print len(tab_string) # will return a length of 1

not_tab_string = r'\t'
print len(not_tab_string) # will return a length of 2, due to raw string

# exceptions
print "\nExceptions"
try:
    print 0 / 0
except ZeroDivisionError:
    print "Cannot divide by zero, derp"
    
# Arrays
print "\nArrays"
x = range(10) # is list [0..9]
zero = x[0]
one = x[1]
nine = x[-1]
eight = x[-2]
x[0] = -1
print x

## slicing
first_three = x[:3]     # [-1,1,2]
three_to_end = x[3:]    # [3..9]
one_to_four = x[1:5]    # [1,2,3,4]
last_three = x[-3:]     # [7,8,9]
without_first_and_last = x[1:-1] # [1..8]
copy_of_x = x[:]        # [-1,1..9]

1 in [1, 2, 3] # true
0 in [1, 2, 3] # false

x = [1, 2, 3]
x.extend([4, 5, 6]) # now x is [1..6]

y = x + [4, 5, 6] # y will be [1..6] and x unchanged
print y

## unpack
x, y = [1, 2]
_, y = [1, 2] # use underscore for throwaway
print x, y

# Tuples
print "\nTuples" # they are immutable, cannot modify
my_list = [1, 2]
my_tuple = (1, 2)
other_tuple = 3, 4
my_list[1] = 3 # now my_list is [1, 3]
print "my_tuple:", my_tuple

try:
    my_tuple[1] = 3
except TypeError: # will get type error when trying to modify a tuple
    print "Cannot modify a tuple"
    
def sum_and_product(x, y):
    return (x + y), (x * y) # convenient way to return multiple values from fxns

sp = sum_and_product(2, 3) # equals (5, 6)
s, p = sum_and_product(5, 10) # equals s=15 and p = 50
print "sum=", s, "product=", p

x, y = 1, 2 # can be used for multiple assignment
x, y = y, x # Pythonic way for swapping variables x is now 2 and y is 1

# Dictionaries
print "\nDictionaries"
empty_dict = {}
grades = { "Joel" : 80, "Tim" : 95 }
print grades

joels_grade = grades["Joel"] # equals 80
print "joel's grade:", joels_grade

try:
    kates_grade = grades["Kate"]
except KeyError:
    print "No grade for Kate, KeyError"

joel_has_grade = "Joel" in grades # True, can check for Keys

joels_grade = grades.get("Joel", 0) # either Joel's grade or 0 whichever exists
kates_grade = grades.get("Kate", 0) # returns 0, no Kate
no_ones_grade = grades.get("No one") # default return None

grades["Tim"] = 99 # replaces old value
grades["Kate"] = 100 # adds new value
num_students = len(grades)
print "number of students in gradebook:", num_students

tweet = {
    "user" : "joelgrus",
    "text" : "Data Science is Awesome",
    "retweet_count" : 100,
    "hashtags" : ["#data", "#science", "#datascience", "#awesome", "#yolo"]
}

tweet_keys = tweet.keys() # list of keys
print "tweet keys:", tweet_keys
tweet_values = tweet.values() # list of values
tweet_items = tweet.items() # list of (key, value) tuples
print "tweet items:", tweet_items


# 20170406THU
#defaut dict
word_counts = {}
for word in document:
    if word in word_counts:
        word_counts[word] += 1
    else:
        word_counts[word] = 1
        
# or you can handle the expection first
for word in document:
    try:
        word_counts[word] += 1
    except KeyError:
        word_counts[word] = 1
        
# or you can use get
for word in document:
    previous_count = word_counts.get(word, 0)
    word_counts[word] = previous_count + 1
    
# or use default dict
from collections import defaultdict
word_counts = defaultdict(int) # int() produces 0
for word in document:
    word_counts[word] += 1

dd_list = defaultdict(list) # produces empty list
dd_list[0].append(99) # for key 0, there is a list with value 99
dd_list[3].append(1) # for key 3, there is a list with value 1

dd_dict = defaultdict(dict)
dd_dict["Joel"]["City"] = "Seattle"

dd_pair = defaultdict(lambda : [0, 0])
dd_pair[4][1] = 1

# counters
from collections import Counter
c = Counter([0, 1, 2, 0, 2, 9, 9, 9, 9])
# so you would just do:
word_counts = Counter(c)

# prints 10 most common words and counts with most_common method in Counter
for word, count in c.most_common(3):
    print "word:", word, "count:", count

# Sets pg52
s = set()
s.add(1)
s.add(2)
len(s) # length will be 2
s.add(1) 
len(s) # length will still be 2
2 in s # true
3 in s # false

# to check membership, easier to take a set of a list
# then check the set, helps find distinct elements

# Control Flow pg 53
# if statements
parity = "even" if x % 2 == 0 else "odd"
# while statements
x = 10
while x < 10:
    print x, "is less than 10"
    x += 1
    
# for and in statements
for x in range(10):
    print x, "is less than 10"
    
# also use continue to move to next iteration
# and break to quit loop
for x in range(10):
    if x == 3:
        continue
    elif x == 5:
        break
    print x
# will print 0, 1, 2, 4

# Truthiness pg 54
# Booleans are capitalized, True and False
one_test = 1 < 2 # True
true_test = True == False # False

# None is used as an non-existent value
x = None
print x == None # True, but not Pythonic
print x is None # True, and more Pythonic

# there are lots of False-like values
# Such as: False, None, [ ], { }, "", set(), 0, 0.0
# Generally, other values get treated as True

s = some_function_that_returns_a_string()
if s:
    first_char = s[0]
else:
    first_char = ""

# simpler way
first_char = s and s[0]
# since and returns the second argument if the first is true

x = 55
safe_x = x or 0
# safe_x is definitely a number
# if x is truthy, then it will take on x
# if x = None, then safe_x = 0

# all() is True when all elements are truthy, or no elements are falsy
# all() tests are there any false elements
# any() is true when one or more elements are truthy
# any() test are there any true elements
all([True, 1, {9}]) # True
all([True, 1, {}]) # False, {} is falsy
any([True, 1, {}]) # True, True is truthy
all([]) # True, no falsy elements
any([]) # False, no truthy elements

# Sorting pg 57
x = [4, 1, 2, 3]
y = sorted(x) # is now [1, 2, 3, 4]
x.sort() # is now [1, 2, 3, 4]
# can specify reverse=True for largest to smallest

# also can compare results of a function with key:
# sort the list by absolute value from largest to smallest
x = sorted([-4,1,-2,3], key=abs, reverse=True) # is [-4,3,-2,1]

# sort the words and counts from highest count to lowest
x = sorted(word_counts.items(),
           key=lambda (word, count): count,
           reverse=True)

# List Comprehensions pg 58
# can choose certain elements or transform them into a list

even_numbers = [x for x in range(5) if x % 2 == 0] # is [0, 2, 4]
squares = [x * x for x in range(5)] # [0, 1, 4, 9, 16]
even_squares = [x * x for x in even_numbers] # [0, 4, 16]

# can turn lists into dictionaries or sets
square_dict = {x: x * x for x in range(5)}

# if values are not needed, use an underscore
zeroes = [0 for _ in even_numbers] 
# iterates through all elements, so same length, but no value used

# list comprehension can use multiple for loops:
pairs = [(x, y) for x in range(10) for y in range(10)] # 100 pairs (0,0), (0,1) to (9,8), (9,9)
pairs1 = [(x, y) for y in range(10) for x in range(10)] # 100 pairs (0,0), (1,0) to (8,9), (9,9)

# creates an xy pair where x < y
increasing_pairs = [(x, y) for x in range(10) for y in range(x + 1, 10)] 
# (0,0), (0,1) to (6,9), (7,8), (7,9), (8,9)

# Generators and Iterators pg 59
def lazy_range(n):
    """a lazy version of things"""
    i = 0
    while i < n:
        yield i
        i += 1
# using lazy_range will consume the yielded values until none are left
# in Python 3, range is lazy, Python 27 xrange is lazy
# limitation: can only iterate through a generator once, need to recreate or use list

# can also create generators using for list comprehension in parentheses
lazy_evens_below_20 = (i for i in lazy_range(20) if i % 2 == 0)

# for lazy dict, use iteritems() method lazily yields key:value pairs one at a time,
# instead of items()
square_dict = {x: x * x for x in range(5)}
square_values = [y for (x, y) in square_dict.iteritems()] # outputs square values

# Randomness pg 60
import random
four_uniform_randoms = [random.random() for _ in range(4)] # four random numbers between 0 and 1

# for reproducibility, set the seed
random.seed(10) # sets the seed
print random.random()
random.seed(10) # resets the seed
print random.random() # now same as previous

# use randrange method to choose randomly from set range
random.randrange(10) # from 0 to 9
random.randrange(3, 9) # from 3 to 8

# random shuffle reorders list elements randomly
uptoten = range(10)
random.shuffle(uptoten)
print uptoten

# use choice to pick element randomly from list
random.choice(["Alice", "Bob", "Chris", "David"]) # Chris for me

# sample without replacement (lottery example)
lottery_numbers = range(60)
winning_numbers = random.sample(lottery_numbers, 6) # list then sample size
print winning_numbers

# sample with replacement, use multiple random.choice calls
with_replacement = [random.choice(range(10)) for _ in range(4)] # choose 4 from 0..9

# Regular Expressions pg 61
import re
print all([ # all true (all is any false elements and any is any true elements)
    not re.match("a", "cat"), # cat doesn't start with a
    re.search("a", "cat"), # cat does have a in it
    not re.search("c", "dog"), # dog doesn't have c in it
    3 == len(re.split("[ab]", "carbs")), # split by a and b so ['c', 'r', 's']
    "R-D-" == re.sub("[0-9]", "-", "R2D2") # replace digits with dash 
    ]) # prints True
    
# OOP pg 62
# create a class 'Set' with member functions to add, remove, and check 
# if Set contains a certain value

# give class name in PascalCase by convention
class Set:
    # these are the member functions
    # first parameter is 'self'
    # that refers to particular Set object being used
    
    def __init__(self, values = None):
        """This is called the constructor.
        It gets called when you create a new Set.
        You would use it like:
        s1 = Set() # empty set
        s2 = Set([1, 2, 2, 3, 4]) # initialize with values"""
        
        self.dict = {} # each instance of Set has its own dictionary
        # which is what we'll use to track memberships
        
        if values is not None:
            for value in values:
                self.add(value)
                
    def __repr__(self):
        """This is the string representation of a Set object
        if you type it in the Python prompt or print(Set)"""
        return "Set: " + str(self.dict.keys())
    
    # represent value with membershp by being a key in self.dict with True value    
    def add(self, value):
        self.dict[value] = True
        
    # value is in Set if it returns a key in the dictionary
    def contains(self, value):
        return value in self.dict # checks value among self.dict keys
        
    def remove(self, value):
        del self.dict[value]
        
    # add length    
    def __len__(self):
        return len(self.dict.keys())
        
# test created Set object
s1 = Set([1, 2, 2 ,3, 3, 4, 5])
print s1 # returns [1, 2, 3, 4, 5]
s1.add(6) # add 6
print s1 # returns [1, 2, 3, 4, 5, 6]
len(s1) # returns 6
s1.remove(1) # removes 1
print(s1) # [2, 3, 4, 5, 6]

# Functional Tools, pg 63
# when passing functions, sometimes we want to partially apply functions
# called curry to create new functions
# for example:

def exp(base, power):
    return base ** power
    
# now transform into two to the power N
def two_to_the(power):
    return exp(2, power)
# but can get unwieldly, so use functools

from functools import partial
two_to_the = partial(exp, 2) # fills in first argument of exp(base, power)
print two_to_the(3) # 2 ** 3 is 8

# can name argument to replace partially
square_of = partial(exp, power = 2) # now exp(base, 2)
print square_of(3) # exp(3, 2) is 9

# can use map, reduce, and filter as alternative to list comphrensions
def double(x):
    return x * 2
    
xs = [1, 2, 3, 4]
twice_xs = [double(x) for x in xs] # [2, 4, 6, 8]
twice_xs = map(double, xs) # same as above, map double onto xs list
list_doubler = partial(map, double) # assigns double to map(function=double, x)
twice_xs = list_doubler(xs) # same as above, doubles elements in list

# map multi-argument functions with multiple lists
def multiply(x, y):
    return x * y
products = map(multiply, [1, 2, 3], [4, 5, 6]) # [1*4, 2*5, 3*6]
print products # [4, 10, 18]

# filter does the list comprehension of if
def is_even(x):
    """Return true if x is even, false if x is odd"""
    return x % 2 == 0
    

